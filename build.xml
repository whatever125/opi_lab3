<?xml version="1.0"?>
<project name="LAB3" default="build">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property name="src.dir" location="src"/>
    <property name="build.dir" location="build"/>
    <property name="lib.dir" location="lib"/>
    <property name="resources.dir" location="${src.dir}/main/resources"/>
    <property name="native2ascii.dir" location="${resources.dir}/native2ascii"/>
    <property name="webapp.dir" location="${src.dir}/main/webapp"/>
    <property name="main.dir" location="${src.dir}/main"/>
    <property name="test.dir" location="${src.dir}/test"/>
    <property name="test.classes.dir" location="${build.dir}/test-classes"/>
    <property name="test.results.dir" location="${build.dir}/test-results"/>
    <property name="test.report.dir" location="${test.dir}/report"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="music.file" location="resources/music.mp3"/>
    <property name="classes.file" location="resources/classes.txt"/>
    <property name="war.file" location="${build.dir}/${ant.project.name}.war"/>
    <property name="manifest.file" location="${build.dir}/webapp/META-INF/MANIFEST.MF"/>

    <property name="server.host" value="se.ifmo.ru"/>
    <property name="server.port" value="2222"/>
    <property name="server.remote.dir" value="~/wildfly/wildfly-preview-26.1.3.Final/standalone/deployments"/>

    <property name="alt.name.before" value="TimeBean"/>
    <property name="alt.name.after" value="ClockBeam"/>
    <property name="alt.src.dir" location="alt-src"/>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
    </target>

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <path refid="classpath"/>
        <pathelement location="${build.dir}/webapp/WEB-INF/classes"/>
        <pathelement location="${build.dir}/test-classes"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="compile" depends="init">
        <javac srcdir="${main.dir}" destdir="${classes.dir}" includeAntRuntime="false" release="17">
            <classpath refid="classpath"/>
            <compilerarg line="-Xlint:-options"/>
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
    </target>

    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}"/>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}"/>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>

        <war destfile="${war.file}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset dir="${webapp.dir}"/>
            <classes dir="${classes.dir}"/>
            <lib dir="${lib.dir}"/>
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0"/>
            </manifest>
        </war>
        <antcall target="music"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="init-test">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${test.results.dir}"/>
        <mkdir dir="${test.report.dir}"/>
    </target>

    <target name="compile-test" depends="init-test">
        <javac srcdir="${test.dir}" destdir="${test.classes.dir}" includeantruntime="false" release="17">
            <classpath refid="test.classpath"/>
            <compilerarg line="-Xlint:-options"/>
        </javac>
    </target>

    <target name="test" depends="build,compile-test">
        <junitlauncher haltonfailure="false" printsummary="true" failureProperty="test.failed">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>
            <testclasses>
                <fileset dir="${build.dir}/test-classes" includes="**/*Test.class"/>
                <listener type="legacy-xml" outputdir="${test.results.dir}" sendSysOut="true" sendSysErr="true"/>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="report" depends="test">
        <junitreport todir="${test.report.dir}">
            <fileset dir="${build.dir}/test-results">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.dir}/html"/>
        </junitreport>

        <if>
            <isset property="test.failed"/>
            <then>
                <echo message="Tests failed"/>
            </then>
            <else>
                <echo message="Tests passed. Committing report"/>
                <exec executable="git" failonerror="true">
                    <arg value="add"/>
                    <arg value="${test.report.dir}"/>
                </exec>
                <exec executable="git" failonerror="true">
                    <arg value="commit"/>
                    <arg value="-m"/>
                    <arg value="Add JUnit report"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="alt">
        <copy todir="${alt.src.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <replace dir="${src.dir}">
            <include name="**/*.java"/>
            <include name="**/*.xhtml"/>
            <include name="**/*.jsp"/>
            <replacefilter token="${alt.name.before}" value="${alt.name.after}"/>
        </replace>

        <move todir="${src.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
                <include name="**/*.xhtml"/>
                <include name="**/*.jsp"/>
            </fileset>
            <regexpmapper from="(.*)${alt.name.before}(.*)"
                          to="\1${alt.name.after}\2"/>
        </move>

        <antcall target="clean"/>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}-alt.war"/>
        </antcall>

        <delete dir="${src.dir}"/>
        <copy todir="${src.dir}">
            <fileset dir="${alt.src.dir}"/>
        </copy>
        <delete dir="${alt.src.dir}"/>
    </target>

    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="native2ascii">
        <native2ascii src="${resources.dir}" dest="${native2ascii.dir}"
                      includes="**/*.properties" excludes="hibernate.properties"/>
    </target>

    <target name="music">
        <exec executable="mpg123">
            <arg value="-q"/>
            <arg value="${music.file}"/>
        </exec>
    </target>

    <target name="scp" depends="build">
        <input message="Enter username: " addproperty="server.username"/>
        <input message="Enter password: " addproperty="server.password"/>
        <scp file="${war.file}" todir="${server.username}:${server.password}@${server.host}:${server.remote.dir}" port="${server.port}" trust="true"/>
    </target>

    <target name="doc">
        <fileset dir="${build.dir}" id="files.to.process"/>
        <for param="file">
            <path>
                <fileset refid="files.to.process"/>
            </path>
            <sequential>
                <checksum algorithm="md5" property="@{file}.md5">
                    <file name="@{file}"/>
                </checksum>
                <checksum algorithm="sha1" property="@{file}.sha1">
                    <file name="@{file}"/>
                </checksum>
                <pathconvert property="@{file}.relative">
                    <path location="@{file}"/>
                    <globmapper from="${basedir}/*" to="*" />
                </pathconvert>
                <manifest file="${manifest.file}" mode="update">
                    <section name="${@{file}.relative}">
                        <attribute name="MD5-Digest" value="${@{file}.md5}"/>
                        <attribute name="SHA1-Digest" value="${@{file}.sha1}"/>
                    </section>
                </manifest>
            </sequential>
        </for>
    </target>

    <target name="diff">
        <exec executable="git" outputproperty="git.status" failonerror="true">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>

        <loadfile property="classes.list" srcFile="${classes.file}"/>
        <var name="message" value="Cannot commit - changes in"/>

        <for param="class" list="${classes.list}" delimiter="&#10;">
            <sequential>
                <if>
                    <contains string="${git.status}" substring="@{class}.java"/>
                    <then>
                        <var name="line.matched" value="true"/>
                        <var name="message" value="${message} @{class}"/>
                    </then>
                </if>
            </sequential>
        </for>

        <if>
            <isset property="line.matched"/>
            <then>
                <echo message="${message}"/>
            </then>
            <else>
                <exec executable="git" failonerror="true">
                    <arg value="add"/>
                    <arg value="-A"/>
                </exec>
                <exec executable="git" failonerror="true">
                    <arg value="commit"/>
                    <arg value="-m"/>
                    <arg value="Automatic commit"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="team">
        <exec executable="git" failonerror="true">
            <arg value="stash"/>
        </exec>
        <exec executable="git" outputproperty="current.commit" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <exec executable="git" outputproperty="current.branch" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>
        <property name="revision1" value="${current.commit}~1"/>
        <property name="revision2" value="${current.commit}~2"/>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision1}.war"/>
        </antcall>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision2}.war"/>
        </antcall>

        <zip destfile="${build.dir}/prev-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${ant.project.name}_${revision1}.war"/>
                <include name="${ant.project.name}_${revision2}.war"/>
            </fileset>
        </zip>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${current.branch}"/>
        </exec>
        <exec executable="git" failonerror="true">
            <arg value="stash"/>
            <arg value="pop"/>
        </exec>
    </target>

    <target name="history">
        <exec executable="git" failonerror="true">
            <arg value="stash"/>
        </exec>
        <exec executable="git" outputproperty="current.commit" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <exec executable="git" outputproperty="current.branch" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>
        <exec executable="git" outputproperty="commits.list">
            <arg line="rev-list"/>
            <arg line="HEAD"/>
        </exec>

        <for param="commit" list="${commits.list}" delimiter="&#10;" keepgoing="true">
            <sequential>
                <if>
                    <not>
                        <isset property="revision.compiled"/>
                    </not>
                    <then>
                        <trycatch>
                            <try>
                                <echo message="&#10;Checkout revision @{commit}&#10;&#10;"/>
                                <exec executable="git" failonerror="true">
                                    <arg value="checkout"/>
                                    <arg value="@{commit}"/>
                                </exec>
                                <antcall target="compile"/>
                                <echo message="&#10;Revision @{commit} compiled successfully&#10;&#10;"/>
                                <property name="revision.compiled" value="true"/>
                            </try>
                            <catch>
                                <echo message="&#10;Error compiling revision @{commit}&#10;"/>
                            </catch>
                        </trycatch>
                    </then>
                </if>
            </sequential>
        </for>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${current.branch}"/>
        </exec>
        <exec executable="git" failonerror="true">
            <arg value="stash"/>
            <arg value="pop"/>
        </exec>
    </target>

</project>
