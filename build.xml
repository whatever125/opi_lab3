<?xml version="1.0"?>
<project name="LAB3" default="build">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property name="src.dir" location="src"/>
    <property name="build.dir" location="build"/>
    <property name="resources.dir" location="${src.dir}/main/resources"/>
    <property name="lib.dir" location="lib"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="webapp.dir" location="${src.dir}/main/webapp"/>
    <property name="music.file" location="resources/music.mp3"/>
    <property name="classes.file" location="resources/classes.txt"/>
    <property name="war.file" location="${build.dir}/${ant.project.name}.war"/>
    <property name="server.host" value="se.ifmo.ru"/>
    <property name="server.port" value="2222"/>
    <property name="server.remote.dir" value="~/wildfly/wildfly-preview-26.1.3.Final/standalone/deployments"/>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false" release="17">
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar"/>
            </classpath>
            <compilerarg line="-Xlint:-options"/>
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
    </target>

    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}"/>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}"/>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>

        <war destfile="${war.file}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset dir="${webapp.dir}"/>
            <classes dir="${classes.dir}"/>
            <lib dir="${lib.dir}"/>
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0"/>
            </manifest>
        </war>
        <antcall target="music"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="scp" depends="build">
        <input message="Enter username: " addproperty="server.username"/>
        <input message="Enter password: " addproperty="server.password"/>
        <scp file="${war.file}" todir="${server.username}:${server.password}@${server.host}:${server.remote.dir}" port="${server.port}" trust="true"/>
    </target>

    <target name="music">
        <exec executable="mpg123">
            <arg value="-q"/>
            <arg value="${music.file}"/>
        </exec>
    </target>

    <target name="diff">
        <exec executable="git" outputproperty="git.status" failonerror="true">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>

        <loadfile property="classes.list" srcFile="${classes.file}"/>
        <var name="message" value="Cannot commit - changes in"/>

        <for param="class" list="${classes.list}" delimiter="&#10;">
            <sequential>
                <if>
                    <contains string="${git.status}" substring="@{class}.java"/>
                    <then>
                        <var name="line.matched" value="true"/>
                        <var name="message" value="${message} @{class}"/>
                    </then>
                </if>
            </sequential>
        </for>

        <if>
            <isset property="line.matched"/>
            <then>
                <echo message="${message}"/>
            </then>
            <else>
                <exec executable="git" failonerror="true">
                    <arg value="add"/>
                    <arg value="-A"/>
                </exec>
                <exec executable="git" failonerror="true">
                    <arg value="commit"/>
                    <arg value="-m"/>
                    <arg value="Automatic commit"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="team">
        <exec executable="git" failonerror="false">
            <arg value="stash"/>
        </exec>

        <exec executable="git" outputproperty="current.commit" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <exec executable="git" outputproperty="current.branch" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>

        <property name="revision1" value="${current.commit}~1"/>
        <property name="revision2" value="${current.commit}~2"/>

        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision1}.war"/>
        </antcall>

        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision2}.war"/>
        </antcall>

        <zip destfile="${build.dir}/prev-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${ant.project.name}_${revision1}.war"/>
                <include name="${ant.project.name}_${revision2}.war"/>
            </fileset>
        </zip>

        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${current.branch}"/>
        </exec>

        <exec executable="git" failonerror="false">
            <arg value="stash"/>
            <arg value="pop"/>
        </exec>
    </target>

</project>
